// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BlockProgress {
  id             Int      @id @default(1)
  lastBlockHeight BigInt
  updatedAt      DateTime @updatedAt
}

model EventTracking {
  id              Int      @id @default(autoincrement())
  eventType       String
  blockHeight     BigInt
  transactionHash String
  processed       Boolean  @default(false)
  error          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([eventType])
  @@index([blockHeight])
  @@index([processed])
}

model Rarity {
  id           Int        @id @default(autoincrement())
  lootbox      Lootbox     @relation(fields: [lootboxId], references: [id])
  lootboxId    Int
  rarityName   String
  weight       BigInt
  tokens       Token[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([lootboxId])
  @@index([rarityName])
}

model Token {
  id               Int            @id @default(autoincrement())
  tokenCollection  TokenCollection @relation(fields: [tokenCollectionId], references: [id])
  tokenCollectionId Int
  rarity          Rarity?        @relation(fields: [rarityId], references: [id])  // Make optional
  rarityId        Int?           // Make optional
  tokenName       String
  tokenUri        String
  balances        TokenBalance[]
  propertyVersion BigInt
  maxSupply       BigInt
  circulatingSupply BigInt
  tokensBurned    BigInt
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([tokenCollectionId, tokenName, propertyVersion])
  @@index([tokenCollectionId])
  @@index([rarityId])
  @@index([tokenName])
  @@index([propertyVersion])
}

model Lootbox {
  id              Int               @id @default(autoincrement())
  tokenCollection TokenCollection?  @relation(fields: [tokenCollectionId], references: [id])
  tokenCollectionId Int?            // Make optional
  creatorAddress  String
  collectionResourceAddress String
  collectionName  String
  collectionDescription String
  metadataUri     String
  rarities        Rarity[]
  price           BigInt
  priceCoinType   String
  maxStock        BigInt
  availableStock  BigInt
  isActive        Boolean          
  isWhitelisted   Boolean          
  autoTriggerWhitelistTime BigInt
  autoTriggerActiveTime BigInt
  purchases       LootboxPurchase[]
  watchlistedBy   Account[]         @relation("LootboxWatchlist")
  followers       Account[]         @relation("LootboxFollowers")
  totalVolume     BigInt           @default(0)
  purchaseCount   Int              @default(0)
  analytics       LootboxAnalytics?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  timestamp       BigInt

  @@index([tokenCollectionId])
  @@index([creatorAddress])
  @@index([collectionName])
  @@index([priceCoinType])
  @@index([isActive])
  @@index([totalVolume])
  @@index([purchaseCount])
}

model LootboxPurchase {
  id            Int              @id @default(autoincrement())
  lootbox       Lootbox         @relation(fields: [lootboxId], references: [id])
  lootboxId     Int
  buyer         Account         @relation(fields: [buyerAddress], references: [address])
  buyerAddress  String
  quantity      BigInt
  nonce         String
  price         BigInt          // Added price field
  priceCoinType String         // Added price_coinType field
  rewards       LootboxReward[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([lootboxId])
  @@index([buyerAddress])
  @@index([nonce])
  @@index([createdAt]) // For time-based queries
  @@index([price])     // For analytics
}

model LootboxReward {
  id             Int             @id @default(autoincrement())
  purchase       LootboxPurchase @relation(fields: [purchaseId], references: [id])
  purchaseId     Int
  selectedToken  String
  selectedRarity String
  randomNumber   String
  nonce          String
  buyerAddress   String
  collectionName String
  timestamp      BigInt
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([purchaseId])
  @@index([selectedToken])
  @@index([selectedRarity])
}

model VRFCallback {
  id            Int      @id @default(autoincrement())
  callerAddress String
  nonce         String  
  randomNumbers String[]  
  timestamp     BigInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([callerAddress])
  @@index([nonce])
  @@index([timestamp])
}

model TokenClaim {
  id                  Int      @id @default(autoincrement())
  claimer            String
  claimResourceAddress String
  tokensClaimed      Json     // This will store the array of token objects
  totalTokens        BigInt
  timestamp         BigInt
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([claimer])
  @@index([claimResourceAddress])
  @@index([timestamp])
}

model TokenMint {
  id                Int      @id @default(autoincrement())
  tokenDataId       Json     // Stores the full TokenDataId structure
  amount           BigInt
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model TokenData {
  id                        Int      @id @default(autoincrement())
  creator                   String
  collection               String
  name                     String
  description              String
  maximum                  BigInt
  uri                      String
  royaltyPayeeAddress      String
  royaltyPointsDenominator BigInt
  royaltyPointsNumerator   BigInt
  propertyKeys             String[]
  propertyValues           Json      // Store as JSON since it's vector<vector<u8>>
  propertyTypes            String[]
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@unique([creator, collection, name])
  @@index([creator])
  @@index([collection])
  @@index([name])
}

model TokenCollection {
  id            Int      @id @default(autoincrement())
  creator       String
  name          String
  description   String
  uri           String
  maximum       BigInt
  tokens        Token[]
  lootboxes     Lootbox[]  // Required by Prisma
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([creator, name])
  @@index([creator])
  @@index([name])
}

model TokenDeposit {
  id            Int      @id @default(autoincrement())
  tokenId       Json     // Stores the full TokenId structures
  amount        BigInt
  toAddress   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt


}

model TokenWithdraw {
  id            Int      @id @default(autoincrement())
  tokenId       Json     // Stores the full TokenId structure
  amount        BigInt
  fromAddress   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt


}

model TokenBurn {
  id            Int      @id @default(autoincrement())
  tokenId       Json     // Stores the full TokenId structure
  amount        BigInt
  fromAddress   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt


}

model Account {
  address           String           @id  // Blockchain address as primary key
  watchedLootboxes  Lootbox[]        @relation("LootboxWatchlist")
  followedLootboxes Lootbox[]        @relation("LootboxFollowers")
  purchases         LootboxPurchase[]
  tokenBalances     TokenBalance[]
  tokenTransactions TokenTransaction[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([address])
}

model TokenBalance {
  id            Int      @id @default(autoincrement())
  account       Account  @relation(fields: [accountAddress], references: [address])
  accountAddress String
  tokenDataId   Json     // References the TokenDataId structure
  token         Token?   @relation(fields: [tokenId], references: [id])
  tokenId       Int?     
  balance       BigInt
  lastUpdated   DateTime @updatedAt

  @@unique([accountAddress, tokenDataId])
  @@index([accountAddress])
  @@index([lastUpdated])
  @@index([tokenId]) 
}

model TokenTransaction {
  id              Int      @id @default(autoincrement())
  account         Account  @relation(fields: [accountAddress], references: [address])
  accountAddress  String
  tokenDataId     Json     // References the TokenDataId structure
  transactionType String   // "DEPOSIT", "WITHDRAW", "BURN", "MINT"
  amount          BigInt
  fromAddress     String?  // For tracking transfers
  toAddress       String?  // For tracking transfers
  createdAt       DateTime @default(now())

  @@index([accountAddress])
  @@index([tokenDataId])
  @@index([transactionType])
  @@index([createdAt])
  @@index([fromAddress])
  @@index([toAddress])
}

model LootboxAnalytics {
  id              Int      @id @default(autoincrement())
  lootbox         Lootbox  @relation(fields: [lootboxId], references: [id])
  lootboxId       Int      @unique
  volume24h       BigInt   @default(0)
  purchases24h    Int      @default(0)
  uniqueBuyers24h Int      @default(0)
  updatedAt       DateTime @updatedAt

  @@index([volume24h])
  @@index([purchases24h])
  @@index([uniqueBuyers24h])
}

model OFFChain_Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OFFChain_Account {
  id                Int       @id @default(autoincrement())
  walletAddress     String    @unique  // Links to on-chain Account
  email            String?   @unique
  username         String?   @unique
  preferences      Json?     // Store category preferences
  lastLoginAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model OFFChain_LootboxStats {
  id              Int       @id @default(autoincrement())
  lootboxId       Int      @unique  // Links to on-chain Lootbox
  url             String    @unique  // URL format could be: creator-address/collection-name
  viewCount       Int      @default(0)
  likeCount       Int      @default(0)
  trendingScore   Float    @default(0)
  raritiesColorMap String? 
  isAdvertised    Boolean  @default(false)
  isVerified      Boolean  @default(false)
  categories      String[]  // Keep as String[] for simplicity
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([url])
}